<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.jianyun.run</id>
    <title>唐长老日志</title>
    <updated>2023-09-19T00:58:44.279Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://www.jianyun.run"/>
    <link rel="self" href="https://www.jianyun.run/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://www.jianyun.run/images/avatar.png</logo>
    <icon>https://www.jianyun.run/favicon.ico</icon>
    <rights>All rights reserved 2023, 唐长老日志</rights>
    <entry>
        <title type="html"><![CDATA[SpringBoot 原生镜像分层]]></title>
        <id>https://www.jianyun.run/post/springboot-yuan-sheng-jing-xiang-fen-ceng/</id>
        <link href="https://www.jianyun.run/post/springboot-yuan-sheng-jing-xiang-fen-ceng/">
        </link>
        <updated>2023-09-19T00:53:02.000Z</updated>
        <summary type="html"><![CDATA[<p>让<strong>编译、推拉镜像进入秒级</strong></p>
]]></summary>
        <content type="html"><![CDATA[<p>让<strong>编译、推拉镜像进入秒级</strong></p>
<!-- more -->
<p><strong>SpringBoot提供分层能力</strong>，支持构建分层的镜像，分层自下向上分四层</p>
<ul>
<li>release版本依赖</li>
<li>快照版依赖</li>
<li>spring loader</li>
<li>项目编译后文件<br>
基于分层后的镜像，可以让<strong>编译、推拉镜像进入秒级</strong>，日常的编译后文件只有kb或者5M内大小</li>
</ul>
<h2 id="实践">实践</h2>
<h3 id="1-springboot生成分层元信息">1. springboot生成分层元信息</h3>
<blockquote>
<p>Springboot 2.4 版本及后layers默认打开</p>
</blockquote>
<p>springboot插件的配置打开分层参数 <code>layers=true</code></p>
<pre><code class="language-xml">            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;2.3.8.RELEASE&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;!-- 启用分层打包支持 --&gt;
                    &lt;layers&gt;
                        &lt;enabled&gt;true&lt;/enabled&gt;
                    &lt;/layers&gt;
                &lt;/configuration&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
</code></pre>
<p>开启分层后，springboot会在fat jar中生成layers.idx元信息<br>
layers.idx内容示例：</p>
<pre><code>  - &quot;dependencies&quot;:
    - &quot;BOOT-INF/lib/dependency1.jar&quot;
    - &quot;BOOT-INF/lib/dependency2.jar&quot;
  - &quot;spring-boot-loader&quot;:
    - &quot;org/&quot;
  - &quot;snapshot-dependencies&quot;:
    - &quot;BOOT-INF/lib/dependency3-SNAPSHOT.jar&quot;
    - &quot;BOOT-INF/lib/dependency4-SNAPSHOT.jar&quot;    
  - &quot;application&quot;:
    - &quot;BOOT-INF/classes/&quot;
    - &quot;META-INF/&quot;
</code></pre>
<h3 id="2-拆包和打镜像">2. 拆包和打镜像</h3>
<p>spingboot提供了拆包的命令，把springboot fat jar 拆包到extract目录<br>
示例命令 <code>java -Djarmode=layertools -jar app.jar extract</code><br>
执行后可以在extract中获得如下的目录</p>
<ul>
<li>dependencies    release版本依赖</li>
<li>snapshot-dependencies   快照版依赖</li>
<li>spring-boot-loader</li>
<li>application   项目编译后文件</li>
</ul>
<p>简化打包的dockerfile，第一个镜像用于执行拆包，第二个构建启动镜像</p>
<pre><code class="language-dockerfile"># 分层构建, 加速增量构建

FROM openjdk:8 as builder

WORKDIR app
ARG JAR_FILE=target/*.jar
COPY ${JAR_FILE} app.jar
RUN java -Djarmode=layertools -jar app.jar extract &amp;&amp; rm app.jar

FROM openjdk:8
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo $TZ &gt; /etc/timezone
ENV JAVA_OPTS=&quot; -server -Xmx1024m -Xms256m -Xmn512m -Xss256k&quot;

WORKDIR app

COPY --from=builder /app/dependencies/ ./
COPY --from=builder /app/spring-boot-loader/ ./
COPY --from=builder /app/snapshot-dependencies/ ./
COPY --from=builder /app/application/ ./

EXPOSE 9081

ENTRYPOINT [&quot;sh&quot;, &quot;-c&quot;, &quot;java $JAVA_OPTS org.springframework.boot.loader.JarLauncher&quot;]
</code></pre>
<h3 id="3-集成mvn-docker插件">3. 集成mvn docker插件</h3>
<blockquote>
<p>请先配置好docker的私有仓库、推拉</p>
</blockquote>
<p>在mvn中可以增加docker插件，可以简化镜像的构建。</p>
<ul>
<li>配置<code>&lt;dockerFileDir&gt;${project.basedir}&lt;/dockerFileDir&gt;</code> 表示dockerfile文件在当前模块的根，和pom.xml平级。</li>
</ul>
<p>示例</p>
<pre><code class="language-xml">&lt;properties&gt;
        &lt;docker.plugin.version&gt;0.43.4&lt;/docker.plugin.version&gt;
        &lt;docker.registry&gt;example.docker.com&lt;/docker.registry&gt;
        &lt;docker.namespace&gt;example-dev&lt;/docker.namespace&gt;
    &lt;/properties&gt;
 &lt;build&gt;
        &lt;plugins&gt;	
        &lt;plugin&gt;
                &lt;groupId&gt;io.fabric8&lt;/groupId&gt;
                &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${docker.plugin.version}&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;!-- Docker Remote Api--&gt;
                    &lt;!-- 本机则可以注释掉, 如果没有监听2375端口 --&gt;
&lt;!--                    &lt;dockerHost&gt;${docker.host}&lt;/dockerHost&gt;--&gt;
                    &lt;!-- Docker 镜像私服--&gt;
                    &lt;registry&gt;${docker.registry}&lt;/registry&gt;

                    &lt;images&gt;
                        &lt;image&gt;
                            &lt;name&gt;${docker.registry}/${docker.namespace}/${project.name}:${project.version}&lt;/name&gt;
                            &lt;build&gt;
                                &lt;dockerFileDir&gt;${project.basedir}&lt;/dockerFileDir&gt;
                            &lt;/build&gt;
                        &lt;/image&gt;
                    &lt;/images&gt;
                &lt;/configuration&gt;
				&lt;!-- build-image 把构建镜像绑定到了install流程，如果不需要可以把这块配置删除--&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;build-image&lt;/id&gt;
                        &lt;phase&gt;install&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;build&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
</code></pre>
<p>然后就可以使用下面命令打包和构建镜像了</p>
<pre><code class="language-bash"># 编译jar包, 构建镜像和推送
mvn clean install docker:build docker:push 
</code></pre>
<h2 id="参考文档">参考文档</h2>
<ol>
<li><a href="https://spring.io/blog/2020/08/14/creating-efficient-docker-images-with-spring-boot-2-3">Creating Efficient Docker Images with Spring Boot 2.3</a></li>
<li><a href="https://www.cnblogs.com/cnscud/p/15168085.html">Spring Boot使用Docker分层打包</a></li>
<li><a href="https://github.com/fabric8io/docker-maven-plugin">docker-maven-plugin</a></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[gitea在Synology的实践]]></title>
        <id>https://www.jianyun.run/post/gitea-zai-synology-de-shi-jian/</id>
        <link href="https://www.jianyun.run/post/gitea-zai-synology-de-shi-jian/">
        </link>
        <updated>2023-06-29T01:16:30.000Z</updated>
        <summary type="html"><![CDATA[<p>预期：在Synology上使用Docker运行gitea并支持HTTPS和SSH操作仓库。</p>
]]></summary>
        <content type="html"><![CDATA[<p>预期：在Synology上使用Docker运行gitea并支持HTTPS和SSH操作仓库。</p>
<!-- more -->
<p>效果图：<br>
<img src="https://object.16661888.xyz/images/2023/06/weNsm0.png" alt="https" loading="lazy"><br>
<img src="https://object.16661888.xyz/images/2023/06/MUe6db.png" alt="ssh" loading="lazy"></p>
<h2 id="总览">总览</h2>
<p>以下是实践的方案：</p>
<ol>
<li>安装gitea并配置使用的域名</li>
<li>使用Synology的反向代理设置来配置HTTPS访问</li>
<li>配置SSH访问，同时保留群晖22端口的正常访问</li>
</ol>
<blockquote>
<p>note: ssh是最难配置的部分</p>
</blockquote>
<h2 id="配置教程">配置教程</h2>
<h3 id="0-基础要求">0. 基础要求</h3>
<p>本文主要介绍配置https和ssh操作仓库，需要具有一定的基础能力</p>
<ul>
<li>能够使用SSH访问群晖</li>
<li>给群晖配置好了https访问</li>
<li>具有linux操作能力</li>
</ul>
<h3 id="1-安装gitea并配置使用的域名">1. 安装gitea并配置使用的域名</h3>
<p>该步主要参考 gitea的Dcoker安装文档 <a href="https://docs.gitea.com/zh-cn/installation/install-with-docker">install-with-docker</a></p>
<p><img src="https://object.16661888.xyz/images/2023/06/UxNeFP.png" alt="群晖容器配置" loading="lazy"><br>
下面是我的服务配置</p>
<pre><code>version: &quot;3&quot;
services:
  server:
    image: gitea/gitea:1.20.0-rc2
    container_name: gitea
    environment:
      - USER_UID=1032
      - USER_GID=100
      #- DOMAIN=git.jianyun.run
      #- SSH_DOMAIN=git.jianyun.run
      #- GITEA__database__DB_TYPE=postgres
      #- GITEA__database__HOST=192.168.1.1:5432
      #- GITEA__database__NAME=gitea
      #- GITEA__database__USER=xxxxxxxx
      #- GITEA__database__PASSWD=xxxxxx
      - &quot;TZ=Asia/Chongqing&quot;
    restart: always
    volumes:
      - ./data:/data
      # ssh直通时使用，初次安装时不需要
      - /var/services/homes/git/.ssh/:/data/git/.ssh
      # 群晖本地没有这个配置
      #- /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - &quot;3000:3000&quot;
      - &quot;127.0.0.1:2122:22&quot;
</code></pre>
<p><code>environment</code>环境变量被注释是初次安装的配置，第一次启动后配置就持久到配置文件了，后续注释掉这个环境变量。程序会默认使用配置文件。</p>
<h3 id="2-使用synology的反向代理设置来配置https访问">2. 使用Synology的反向代理设置来配置HTTPS访问:</h3>
<blockquote>
<p>这里需要先配置好群晖的https和域名</p>
</blockquote>
<ul>
<li>在群晖管理界面中打开控制面板 ==&gt; 登录门户 ==&gt; 高级 ==&gt; 反向代理服务器</li>
<li>创建一个新的反向代理规则，将本地的HTTPS流量转发到gitea容器运行的地址和端口（例如将来自域名git.jianyun.run的HTTPS流量转发到127.0.0.1:3000）<br>
<img src="https://object.16661888.xyz/images/2023/06/mD8sjv.png" alt="新建反向代理" loading="lazy"></li>
<li>保存配置后，即可通过HTTPS访问gitea</li>
</ul>
<p>如果页面上提示，访问的url不对，可以在gitea的数据目录中，修改app.ini文件，相对路径<code>gitea/conf/app.ini</code>。将ROOL_URL修改为你的域名，例如<code>ROOT_URL = https://git.jianyun.run/</code></p>
<h3 id="3-配置ssh访问">3. 配置SSH访问：</h3>
<h4 id="a-新建git用户">a. 新建git用户</h4>
<p>在群晖管理界面中打开控制面板，并选择用户，创建一个新的用户 gituser ，用于SSH访问gitea的仓库。群晖禁用了创建git账号，不过我们可以绕过去。</p>
<p>在创建gituser后，ssh登录到群晖终端。我们强行把gituser修改为git。</p>
<pre><code class="language-bash">sudo su
synouser --rename gituser git
</code></pre>
<p>在控制面板中用户权限页面，允许访问homes和数据所在的配置共享文件夹。<br>
在File Station中，找到homes，选择git目录修改它的属性，让这个目录所有权属于git<br>
<img src="https://object.16661888.xyz/images/2023/06/1IpOjh.png" alt="1IpOjh" loading="lazy"><br>
<img src="https://object.16661888.xyz/images/2023/06/Eslslz.png" alt="Eslslz" loading="lazy"></p>
<p>然后在终端中，编辑<code>/etc/passwd</code>，允许git用户登录，将<code>/sbin/nologin</code> 修改为 <code>/bin/sh</code> 保存。</p>
<pre><code>git:x:1032:100::/var/services/homes/git:/bin/sh
</code></pre>
<p>需要修改用户目录为755，这是群晖的一个已知问题，不修改会导致使用git登录ssh失败。</p>
<pre><code class="language-bash">sudo chmod 755 /var/services/homes/git
</code></pre>
<h4 id="b-配置群晖的ssh">b. 配置群晖的ssh</h4>
<p>在root用户下执行</p>
<pre><code class="language-bash"># 记录uid、gid
# 示例： uid=1032(git) gid=100(users)
id git

# 创建gitea ssh端口转发配置
touch /usr/local/bin/gitea
# docker gitea映射的ssh端口是2122
echo 'ssh -p 2122 -o StrictHostKeyChecking=no git@127.0.0.1 &quot;SSH_ORIGINAL_COMMAND=\&quot;$SSH_ORIGINAL_COMMAND\&quot; $0 $@&quot;' &gt; /usr/local/bin/gitea
# 使用git用户的uid，gid
sudo chown -R 1032:100 /usr/local/bin/gitea
sudo chmod +x /usr/local/bin/gitea
# 创建git用户的 .ssh 目录
mkdir /var/services/homes/git/.ssh
sudo chown -R 1032:100 /var/services/homes/git/.ssh
sudo chmod -R 700 /var/services/homes/git/.ssh
# 创建 gitea key
sudo -u git ssh-keygen -t rsa -b 4096 -C &quot;Gitea Host Key&quot;
sudo cat /var/services/homes/git/.ssh/id_rsa.pub &gt;&gt; /var/services/homes/git/.ssh/authorized_keys
sudo chown -R 1032:100 /var/services/homes/git/.ssh/authorized_keys
sudo chmod -R 600 /var/services/homes/git/.ssh/authorized_keys
</code></pre>
<h4 id="c-修改gitea-docker-compose配置">c. 修改gitea docker-compose配置</h4>
<p>修改环境变量中的USER_UID、USER_GID，使它和git用户的保持一致。</p>
<pre><code class="language-yaml">   environment:
      - USER_UID=1032
      - USER_GID=100
</code></pre>
<p>挂载ssh目录</p>
<pre><code class="language-yaml">volumes:
      # ssh直通时使用，初次安装时不需要
      - /var/services/homes/git/.ssh/:/data/git/.ssh
</code></pre>
<p>gitea的数据目录需要群晖中修改属主，改为git。在File Station中改也行，在终端中也可以</p>
<p>假设当前在数据目录这里</p>
<pre><code class="language-bash">sudo chown -R 1032:100 ./data
</code></pre>
<p>修改完成后重启服务。</p>
<h4 id="d-测试">d. 测试</h4>
<p>在gitea网页上，增加自己的公钥。<br>
然后 ssh git@git.jianyun.run，正确的话可以获得这样的提示。</p>
<figure data-type="image" tabindex="1"><img src="https://object.16661888.xyz/images/2023/06/IKSDdH.png" alt="IKSDdH" loading="lazy"></figure>
<h2 id="可选-禁用ssh密码登录">[可选] 禁用ssh密码登录</h2>
<p>为了更好地安全性，我们应该禁用SSH密码登录。<strong>当然你必须先设置好公钥登录。</strong><br>
使用在群晖终端上，修改<code>/etc/ssh/sshd_config</code>文件, <code>PasswordAuthentication</code>设置为<code>no</code>。然后使用<code>sudo systemctl restart sshd</code> 重启服务。</p>
<pre><code>PasswordAuthentication no
</code></pre>
<h2 id="end">End</h2>
<p>这样，gitea就可以在Synology上成功运行，并支持HTTPS和SSH访问。你可以根据实际情况进行配置和调整。</p>
<h2 id="引用">引用</h2>
<ol>
<li><a href="https://blog.aaronlenoir.com/2018/05/06/ssh-into-synology-nas-with-ssh-key/">Configure Synology NAS SSH Key-based authentication</a></li>
<li><a href="https://docs.gitea.com/zh-cn/installation/install-with-docker">gitea: 使用 Docker 安装</a></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[黑群晖人脸识别]]></title>
        <id>https://www.jianyun.run/post/facial_recognition_using_synology_NAS/</id>
        <link href="https://www.jianyun.run/post/facial_recognition_using_synology_NAS/">
        </link>
        <updated>2023-04-24T01:40:03.000Z</updated>
        <content type="html"><![CDATA[<p>群晖前段时间发布了一个比较坑的机器 DS923+，没有核显，被大家吐槽坏了。但是拿来黑群晖可以直接免人脸补丁，非常棒。另外新特性 m2硬盘直接作为存储池在这个型号上是可用的。只需要破解下硬盘型号限制就好了。</p>
<p>对于相册中的HEVC格式照片，需要激活AME 套件来使用HEVC解码器。</p>
<p>对于7.1系统，可以使用 <a href="https://gist.githubusercontent.com/jianyun8023/a8292db0e84334eee952bebeb94d7290/raw/aem.py">aem.py</a> 修补程序启用 Advanced Media Extensions 3.0 ，而无需登录帐户。</p>
<blockquote>
<p>2023-06-29更新：对于7.2系统，使用<a href="https://gist.githubusercontent.com/jianyun8023/a8292db0e84334eee952bebeb94d7290/raw/ame72-3005.py">ame72-3005.py</a></p>
</blockquote>
<p>前提条件：<br>
1、 群晖系统必须是半洗白状态，即 SN 是正确的， MAC 地址随意，无要求。<br>
2、AME 套件需是 3.0 版本及以上。 操作流程：<br>
1、 从套件中心下载安装 AME3.0。</p>
<p>ssh登陆群晖后，root权限执行 <code>python aem.py</code> 即可激活。如果未成功激活，卸载重新安装 AME3.0套件。</p>
<blockquote>
<p>2023-06-29更新：hevc和heic还是需要使用 <a href="https://github.com/wirgen/synocodectool-patch">synocodectool-patch</a> 进行破解，配合ame激活，群晖相册的功能就都正常了。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[黑群晖DS923+开启nvme存储]]></title>
        <id>https://www.jianyun.run/post/hei-qun-hui-ds923kai-qi-nvme-cun-chu/</id>
        <link href="https://www.jianyun.run/post/hei-qun-hui-ds923kai-qi-nvme-cun-chu/">
        </link>
        <updated>2023-04-03T03:34:27.000Z</updated>
        <content type="html"><![CDATA[<h2 id="文件信息">文件信息</h2>
<p>版本：DS923+ 7.1.1 42962 update 4<br>
修改文件： /lib64/libhwcontrol.so.1<br>
原始sha1:  ecd958868934ea1f8c15858eba8b981169505b0a</p>
<p>用hex编辑器进行下面替换。<br>
macOS可以使用 Hex Fiend工具</p>
<pre><code>search : 1EFA803E00B8010000007520
replace: 1EFA803E00B8010000009090
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://object.16661888.xyz/images/2023/04/UDZvQQ.png" alt="示例" loading="lazy"></figure>
<p>然后执行下面命令</p>
<pre><code class="language-bash">sudo -i
echo &quot;2C396: 9090&quot; | xxd -r - /usr/lib/libhwcontrol.so.1
chmod 644 /usr/lib/libhwcontrol.so.1
</code></pre>
<p>重启机器后即可设置nvme硬盘作为存储<br>
<img src="https://object.16661888.xyz/images/2023/04/pxXVzm.png" alt="效果" loading="lazy"></p>
<hr>
<h2 id="纯享版命令">纯享版命令</h2>
<p>直接使用下列 linux命令即可完成文件修改</p>
<pre><code class="language-bash">cd /tmp
xxd -p /lib64/libhwcontrol.so.1 &gt; libhwcontrol.hex
sed -i 's/1EFA803E00B8010000007520/1EFA803E00B8010000009090/g' libhwcontrol.hex
xxd -r -p libhwcontrol.hex &gt; libhwcontrol_patch.so.1
echo &quot;2C396: 9090&quot; | xxd -r - libhwcontrol_patch.so.1
chmod 644 libhwcontrol_patch.so.1
# 替换原文件
cp /usr/lib/libhwcontrol.so.1 /usr/lib/libhwcontrol.so.1.bak
mv libhwcontrol_patch.so.1 /usr/lib/libhwcontrol.so.1
</code></pre>
<hr>
<h2 id="参考内容">参考内容</h2>
<ol>
<li><a href="https://xpenology.com/forum/topic/67961-use-nvmem2-hard-drives-as-storage-pools-in-synology/#comment-438877">https://xpenology.com/forum/topic/67961-use-nvmem2-hard-drives-as-storage-pools-in-synology/#comment-438877</a></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[试用AI翻译英文EPUB，感觉真不错]]></title>
        <id>https://www.jianyun.run/post/shi-yong-ai-fan-yi-ying-wen-epubgan-jue-zhen-bu-cuo/</id>
        <link href="https://www.jianyun.run/post/shi-yong-ai-fan-yi-ying-wen-epubgan-jue-zhen-bu-cuo/">
        </link>
        <updated>2023-03-08T06:00:18.000Z</updated>
        <content type="html"><![CDATA[<p>最近看到了 <a href="https://github.com/yihong0618">@yihong0618</a> 写的 <a href="https://github.com/yihong0618/bilingual_book_maker">bilingual_book_maker</a> 项目，基于 OpenAI 实现了对 EPUB 书籍的翻译，效果不错。<br>
我拿来翻译了 Mastering Apache Pulsar 这本英文书。以下是效果图：<br>
<img src="https://object.16661888.xyz/images/2023/03/rE2MOH.png" alt="效果图1" loading="lazy"><br>
<img src="https://object.16661888.xyz/images/2023/03/k7S1kz.png" alt="效果图2" loading="lazy"></p>
<p>这本书被拆成了1048个文本块，耗时一个晚上+一个上午。正常用3个小时就可以完成，但是嘛，期间有多次中断退出，需要手动恢复。</p>
<hr>
<p>翻译出来的文件示例<br>
下载链接</p>
<ul>
<li><a href="https://www.aliyundrive.com/s/wvieGUXBc6F">阿里云盘 提取码: a1jd</a></li>
<li><a href="https://1drv.ms/u/s!AuX_fjJmVpUXhe9rL52r_F8LUNMitw?e=YlXERw">备用链接</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[AI魔法师 吟唱一个小工具：bookimporter]]></title>
        <id>https://www.jianyun.run/post/ai-jia-chi-mo-fa-yin-chang-sheng-ming-yi-ge-go-yu-yan-gong-ju-bookimporter/</id>
        <link href="https://www.jianyun.run/post/ai-jia-chi-mo-fa-yin-chang-sheng-ming-yi-ge-go-yu-yan-gong-ju-bookimporter/">
        </link>
        <updated>2023-02-24T08:14:38.000Z</updated>
        <summary type="html"><![CDATA[<p>最近我使用魔法吟唱声明了一个Go语言的工具：BookImporter。这个工具可以帮助你快速导入电子书到你的电子书管理软件中，比如Calibre。它支持多种电子书格式，包括EPUB、MOBI、PDF等。</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近我使用魔法吟唱声明了一个Go语言的工具：BookImporter。这个工具可以帮助你快速导入电子书到你的电子书管理软件中，比如Calibre。它支持多种电子书格式，包括EPUB、MOBI、PDF等。</p>
<!-- more -->
<h2 id="起因">起因</h2>
<p>我最近下载了一些电子书，过滤出epub文件，大概有7w多本。通常我会对它们进行重命名为 <code>ebook-a-$n</code>格式，以方便导入后对损坏的书籍清理。<br>
重命名我有两种方式，</p>
<ol>
<li>使用rename命令批量处理，例如 <code>rename  's/.*\.epub$/ebook-$N.epub/' /book-import/*.epub</code></li>
<li>使用macOS访达的批量进行处理，一次最多1w本。<br>
通常我会使用方式1，因为文件太多了，一行命令就可以搞定。但是rename并不ok，也提示我文件太多了。无奈我只好手动处理了。</li>
</ol>
<p>写个工具把整个导入流程搞一下也是可以的，先试试AI吟唱写代码吧。</p>
<h2 id="代码生成">代码生成</h2>
<p>目前我加了rename的功能,用来批量重命名epub文件。</p>
<p>该工具具有以下参数：</p>
<pre><code>--debug                启用调试信息
--do-try               仅输出将要执行的操作，而不实际重命名文件
-f, --format stringArray   要匹配的文件格式（例如 'txt'）（默认为 [*]）
-h, --help                 显示 rename 命令的帮助信息
-o, --output string        移动文件的输出目录
-r, --recursive            递归搜索文件
--start-num int        序列的起始编号（默认为 1）
-t, --template string      新文件名的模板（例如 'file-$n'）（默认为 &quot;file-$n&quot;）
</code></pre>
<h3 id="吟唱内容">吟唱内容</h3>
<blockquote>
<p>写golang的小工具，使用cobra定义命令的输出，定义子命令rename，能够按格式匹配文件，然后进行批量重命名。可选参数有--debug开启debug信息输出，--do-try表示仅打印信息不重命名和移动文件，-f文件格式，-r递归解析，-m移动文件，-o输出文件夹，-t模板用于配置新文件名，-i表示模板中$n的起始数字。-f文件格式可以写为 * :全匹配或者 epub :匹配epub文件 epub|azw3 :匹配epub和azw3文件。-t模板 模板可选参数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi mathvariant="normal">是</mi><mi mathvariant="normal">文</mi><mi mathvariant="normal">件</mi><mi mathvariant="normal">序</mi><mi mathvariant="normal">号</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">示</mi><mi mathvariant="normal">例</mi><mi mathvariant="normal">模</mi><mi mathvariant="normal">板</mi><mi>e</mi><mi>b</mi><mi>o</mi><mi>o</mi><mi>k</mi><mo>−</mo></mrow><annotation encoding="application/x-tex">n 是文件序号，示例模板 ebook-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">序</span><span class="mord cjk_fallback">号</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">示</span><span class="mord cjk_fallback">例</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">板</span><span class="mord mathdefault">e</span><span class="mord mathdefault">b</span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">−</span></span></span></span>n 表示会将文件重命名为ebook-1、ebook-2这样的文件名，保留原文件格式。这些参数都会绑定到名为RenameConfig的结构上。</p>
</blockquote>
<p>在我的吟唱下，ChatGPT生成了以下代码：</p>
<pre><code class="language-go">package main

import (
	&quot;fmt&quot;
	&quot;github.com/spf13/cobra&quot;
	&quot;os&quot;
	&quot;path/filepath&quot;
	&quot;strconv&quot;
	&quot;strings&quot;
)

type RenameConfig struct {
	Debug      bool
	DoTry      bool
	Format     string
	Recursive  bool
	Move       bool
	OutputDir  string
	Template   string
	StartIndex int
}

func main() {
	rootCmd := &amp;cobra.Command{
		Use:   &quot;bookImporter&quot;,
		Short: &quot;Import books into your library&quot;,
		Run: func(cmd *cobra.Command, args []string) {
			fmt.Println(&quot;bookImporter v0.1&quot;)
		},
	}

	renameCmd := &amp;cobra.Command{
		Use:   &quot;rename&quot;,
		Short: &quot;Rename or move files according to a template&quot;,
		Long: `Rename or move files according to a template.

The rename command will rename or move files according to a template that you
specify. The template can include the file extension, so if you want to keep
the original extension, you can include it in the template. You can also use
a sequence number in the template to number the files sequentially.`,
		Run: func(cmd *cobra.Command, args []string) {
			config := RenameConfig{
				Debug:      cmd.Flag(&quot;debug&quot;).Value.String() == &quot;true&quot;,
				DoTry:      cmd.Flag(&quot;do-try&quot;).Value.String() == &quot;true&quot;,
				Format:     cmd.Flag(&quot;format&quot;).Value.String(),
				Recursive:  cmd.Flag(&quot;recursive&quot;).Value.String() == &quot;true&quot;,
				Move:       cmd.Flag(&quot;move&quot;).Value.String() == &quot;true&quot;,
				OutputDir:  cmd.Flag(&quot;output&quot;).Value.String(),
				Template:   cmd.Flag(&quot;template&quot;).Value.String(),
				StartIndex: parseIntFlag(cmd, &quot;start-num&quot;),
			}

			if config.Debug {
				fmt.Println(&quot;Debugging information:&quot;)
				fmt.Printf(&quot;  - Format: %s\n&quot;, config.Format)
				fmt.Printf(&quot;  - Recursive: %v\n&quot;, config.Recursive)
				fmt.Printf(&quot;  - Move: %v\n&quot;, config.Move)
				fmt.Printf(&quot;  - OutputDir: %s\n&quot;, config.OutputDir)
				fmt.Printf(&quot;  - Template: %s\n&quot;, config.Template)
				fmt.Printf(&quot;  - StartIndex: %d\n&quot;, config.StartIndex)
			}

			files, err := findFiles(config.Format, config.Recursive)
			if err != nil {
				fmt.Printf(&quot;Error: %s\n&quot;, err)
				os.Exit(1)
			}

			if len(files) == 0 {
				fmt.Println(&quot;No files found.&quot;)
				return
			}

			var (
				renamedFiles []string
				movedFiles   []string
			)

			for i, file := range files {
				newName := buildNewName(config.Template, config.StartIndex+i, file)

				if config.Move {
					outputDir := config.OutputDir
					if outputDir == &quot;&quot; {
						outputDir = filepath.Dir(file)
					}

					outputPath := filepath.Join(outputDir, newName)

					if !config.DoTry {
						err = os.Rename(file, outputPath)
						if err != nil {
							fmt.Printf(&quot;Error: %s\n&quot;, err)
							os.Exit(1)
						}
					}

					movedFiles = append(movedFiles, file+&quot; -&gt; &quot;+outputPath)
				} else {
					outputPath := filepath.Join(filepath.Dir(file), newName)

					if !config.DoTry {
						err = os.Rename(file, outputPath)
						if err != nil {
							fmt.Printf(&quot;Error: %s\n&quot;, err)
							os.Exit(1)
						}
					}
					renamedFiles = append(renamedFiles, file+&quot; -&gt; &quot;+outputPath)
				}

			}
		
			fmt.Printf(&quot;%d files found.\n&quot;, len(files)),
			if config.Move {
				fmt.Printf(&quot;%d files moved:\n&quot;, len(movedFiles))
				for _, file := range movedFiles {
					fmt.Printf(&quot;  - %s\n&quot;, file)
				}
			} else {
				fmt.Printf(&quot;%d files renamed:\n&quot;, len(renamedFiles))
				for _, file := range renamedFiles {
					fmt.Printf(&quot;  - %s\n&quot;, file)
				}
			}
		},
	}

	renameCmd.Flags().Bool(&quot;debug&quot;, false, &quot;Enable debugging information&quot;)
	renameCmd.Flags().Bool(&quot;do-try&quot;, false, &quot;Only print out actions that would be performed&quot;)
	renameCmd.Flags().String(&quot;format&quot;, &quot;*&quot;, &quot;File format to match (e.g. '*.txt')&quot;)
	renameCmd.Flags().Bool(&quot;recursive&quot;, false, &quot;Recursively search for files&quot;)
	renameCmd.Flags().Bool(&quot;move&quot;, false, &quot;Move files instead of renaming them&quot;)
	renameCmd.Flags().String(&quot;output&quot;, &quot;&quot;, &quot;Output directory for moved files&quot;)
	renameCmd.Flags().String(&quot;template&quot;, &quot;file-$n&quot;, &quot;Template for new filename&quot;)
	renameCmd.Flags().Int(&quot;start-num&quot;, 1, &quot;Starting number for sequence&quot;)

	rootCmd.AddCommand(renameCmd)

	if err := rootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

}

func findFiles(format string, recursive bool) ([]string, error) {
	var files []string

	matches, err := filepath.Glob(format)
	if err != nil {
		return nil, err
	}

	for _, match := range matches {
		info, err := os.Stat(match)
		if err != nil {
			return nil, err
		}

		if !info.IsDir() {
			files = append(files, match)
		} else if recursive {
			subFiles, err := findFiles(filepath.Join(match, format), true)
			if err != nil {
				return nil, err
			}

			files = append(files, subFiles...)
		}
	}

	return files, nil

}

func buildNewName(template string, index int, file string) string {
	ext := filepath.Ext(file)
	newName := strings.Replace(template, &quot;$n&quot;, strconv.Itoa(index), -1)
	newName = strings.Replace(newName, &quot;$e&quot;, ext, -1)

	if ext != &quot;&quot; &amp;&amp; !strings.Contains(newName, &quot;$e&quot;) {
		newName += ext
	}

	return newName
}

func parseIntFlag(cmd *cobra.Command, name string) int {
	val, _ := cmd.Flags().GetInt(name)
	return val
}

</code></pre>
<p>我拿过来代码，大致改了改，就可以使用了。</p>
<p>代码放在了github上 <a href="https://github.com/jianyun8023/bookimporter/blob/main/cmd/rename.go">https://github.com/jianyun8023/bookimporter/blob/main/cmd/rename.go</a></p>
<h2 id="文档">文档</h2>
<p>接下来我使用了Notion AI生成了Readme</p>
<h3 id="魔法吟唱">魔法吟唱</h3>
<blockquote>
<p>写一下bookimporter的介绍，这是我自己向calibre书库导入书籍的工作流。通常我会过滤出epub文件，然后进行批量重命名，接着对epub中的书籍标题进行清理，去除一堆冗长的名称。接下来会调用calibredb进行书籍的导入。</p>
</blockquote>
<h3 id="生成的描述">生成的描述</h3>
<p>BookImporter是一款功能强大的工具，它为用户提供了一种快速、方便的方式来导入电子书到Calibre书库中。作为一名电子书爱好者，你可能会在各种平台上购买或下载电子书。但是，当你的电子书数量逐渐增多时，你可能会发现管理它们变得越来越困难。这时，BookImporter就能派上用场了。</p>
<p>使用BookImporter，你可以轻松地将你的电子书导入到Calibre书库中，并对它们进行管理和整理。首先，你可以使用该工具过滤出所需的epub文件，然后进行批量重命名，以方便后续的管理。接着，你可以对epub中的书籍标题进行清理，去除冗长的名称，让书名更加简洁、明了。最后，你可以使用Calibredb对书籍进行导入，以便快速管理和阅读自己的电子书。</p>
<p>除了上述功能外，BookImporter还具有以下优点：</p>
<ul>
<li>高效性：该工具可以快速导入大量的电子书，让你的阅读更加高效。</li>
<li>多平台支持：BookImporter可以在多个平台上运行，包括Windows、Mac和Linux等。</li>
<li>自定义选项：用户可以根据自己的需求，自定义BookImporter的选项，以便更好地适应自己的工作流程。</li>
</ul>
<p>总之，如果你是一名电子书爱好者，需要对自己的电子书进行管理和整理，那么BookImporter会是一个不错的选择。它能够帮助你快速导入和管理电子书，让你的阅读更加便捷和愉快。</p>
<h2 id="结尾">结尾</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[免费让家宽公网IP使用上443端口]]></title>
        <id>https://www.jianyun.run/post/mian-fei-rang-jia-kuan-gong-wang-ip-shi-yong-shang-443-duan-kou/</id>
        <link href="https://www.jianyun.run/post/mian-fei-rang-jia-kuan-gong-wang-ip-shi-yong-shang-443-duan-kou/">
        </link>
        <updated>2023-02-16T08:52:45.000Z</updated>
        <summary type="html"><![CDATA[<p>家庭宽带有公网IP的情况下就可以部署自己的博客等等，但是80和443是无法使用的，因为这些端口被运营商防火墙拦截掉了。<br>
通常我们会使用一台云服务器代理这个流量，但是嘛，云服务器的流量和带宽太贵了，用不起呀。家宽的上传带宽是有30-40Mbps的，搞台国内的云服务带宽那么小，不好用呀。<br>
现在有一个免费的办法解决这个问题</p>
]]></summary>
        <content type="html"><![CDATA[<p>家庭宽带有公网IP的情况下就可以部署自己的博客等等，但是80和443是无法使用的，因为这些端口被运营商防火墙拦截掉了。<br>
通常我们会使用一台云服务器代理这个流量，但是嘛，云服务器的流量和带宽太贵了，用不起呀。家宽的上传带宽是有30-40Mbps的，搞台国内的云服务带宽那么小，不好用呀。<br>
现在有一个免费的办法解决这个问题</p>
<!-- more -->
<p>这个方法可以免费让家宽公网IP使用上443端口，这就是在cloudflare上进行域名配置，允许代理流量，并使用rules功能重定向到家宽可用的端口。</p>
<p>首先，我们cloudflare上进行域名配置，一个ddns注册过来的域名，这个不开dns代理，一个对外的域名，使用dns代理功能。</p>
<figure data-type="image" tabindex="1"><img src="https://object.16661888.xyz/images/2023/02/W8Oqlz.png" alt="image-20230216170749345" loading="lazy"></figure>
<p>继续在rules中打开origin-rules，在里面填写家宽可用的端口，比如8542端口。</p>
<figure data-type="image" tabindex="2"><img src="https://object.16661888.xyz/images/2023/02/X2nKSY.png" alt="image-20230216170944305" loading="lazy"></figure>
<p>在这里创建一个rule</p>
<figure data-type="image" tabindex="3"><img src="https://object.16661888.xyz/images/2023/02/iQWi09.png" alt="image-20230216171101294" loading="lazy"></figure>
<p>接下来save后，就可以在浏览器中直接使用443访问你的域名了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[软路由续命Pcie 2.5g网卡]]></title>
        <id>https://www.jianyun.run/post/ruan-lu-you-xu-ming-pcie-25g-wang-qia/</id>
        <link href="https://www.jianyun.run/post/ruan-lu-you-xu-ming-pcie-25g-wang-qia/">
        </link>
        <updated>2022-12-30T05:28:20.000Z</updated>
        <summary type="html"><![CDATA[<p>无名软路由成功续命2.5g网卡✌️<br>
目前家里网络已经全线升级了2.5G网络，而先前使用的千兆软路由因为使用usb的2.5G网卡稳定性不佳而下岗。<br>
这个软路由怎么利用下来了呢，tb上搜索可以找到mpcie的2.5G网卡，能够改造进去。<br>
在这期间经历了刷机、刷Bios、打孔，最终完美解决。</p>
]]></summary>
        <content type="html"><![CDATA[<p>无名软路由成功续命2.5g网卡✌️<br>
目前家里网络已经全线升级了2.5G网络，而先前使用的千兆软路由因为使用usb的2.5G网卡稳定性不佳而下岗。<br>
这个软路由怎么利用下来了呢，tb上搜索可以找到mpcie的2.5G网卡，能够改造进去。<br>
在这期间经历了刷机、刷Bios、打孔，最终完美解决。</p>
<!-- more -->
<h2 id="网卡不识别">网卡不识别</h2>
<p>tb上够买的Intel i225 b3网卡。到货后，拆开软路由，直接安装上网卡，测试一个晚上。发现在openwrt、ikuai、winpe均无法发现pcie设备。<br>
进入bios，也识别不到。</p>
<h2 id="查找解决办法">查找解决办法</h2>
<figure data-type="image" tabindex="1"><img src="https://object.16661888.xyz/images/2023/02/IMG_0729.jpeg" alt="IMG_0729" loading="lazy"></figure>
<p>购买这个软路由的店铺已经关店了。只好另寻它法。</p>
<p>按主板上的版号Q3865UG6-P V1.2，查找到是由 <a href="https://www.qotom.us/qotomnet/">qotom</a> 这个公司上产的工控板。</p>
<p>由于是深夜，第二天联系客服，客服提供了解决方案，升级BIOS，并提供了BIOS下载地址。</p>
<p><a href="http://www.qotom.us/download/Bios/Q500G6-Q5XXG6/">Q5XXG6 bios</a></p>
<h2 id="刷bios">刷BIOS</h2>
<p>当我要刷写BIOS时，遇到使用各种WinPE都没有效果的情况，都提示系统不兼容。经过一番搜索，发现需要使用DOS，但是我放在优盘的BIOS文件识别不到。再尝试将磁盘格式化为FAT32格式后，才将BIOS刷写进入。</p>
<p>bios文件列表</p>
<pre><code>QSKL0101.V12
F.bat
FPT.exe
fparts.txt
</code></pre>
<p>刷写命令</p>
<pre><code>c:
./F.bat
</code></pre>
<p>重新启动系统，可以看到成功识别了新网卡</p>
<pre><code>
CPU： Intel(R) Celeron(R) CPU 3865U @ 1.80GHz | 2048 KB | 400 MHz - 1800 MHz | ×2
硬盘： ATA TOSHIBA THNSNJ12 0101 (119.24GB)
内存： 8114MB
主板芯片： Intel Corporation Xeon E3-1200 v6/7th Gen Core Processor Host Bridge/DRAM Registers (rev 02)
网卡：Intel Corporation I211 Gigabit Network Connection (rev 03) (eth0 40:62:31:0a:c0:f3)
网卡：Intel Corporation I211 Gigabit Network Connection (rev 03) (eth1 40:62:31:0a:c0:f4)
网卡：Intel Corporation I211 Gigabit Network Connection (rev 03) (eth2 40:62:31:0a:c0:f5)
网卡：Intel Corporation I211 Gigabit Network Connection (rev 03) (eth3 40:62:31:0a:c0:f6)
网卡：Intel Corporation I211 Gigabit Network Connection (rev 03) (eth4 40:62:31:0a:c0:f7)
网卡：Intel Corporation I211 Gigabit Network Connection (rev 03) (eth5 40:62:31:0a:c0:f8)
网卡：Intel Corporation Ethernet Controller I225-V (rev 03) (eth6 00:01:20:19:0a:a4)
</code></pre>
<h2 id="面板打孔">面板打孔</h2>
<p>请忽略垫的纸，我买的高温绝缘胶带还没到<br>
<img src="https://object.16661888.xyz/images/2023/02/koQOHU.jpeg" alt="FlOa28paYAAAgx9" style="zoom:33%;" /></p>
<img src="https://object.16661888.xyz/images/2023/02/EFD5XA.jpeg" alt="FlOa28racAA92_N" style="zoom:33%;" />]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ffmpeg几个简单用法]]></title>
        <id>https://www.jianyun.run/post/ffmpeg-ji-ge-jian-dan-yong-fa/</id>
        <link href="https://www.jianyun.run/post/ffmpeg-ji-ge-jian-dan-yong-fa/">
        </link>
        <updated>2022-02-07T02:09:12.000Z</updated>
        <content type="html"><![CDATA[<h1 id="ffmpeg">ffmpeg</h1>
<h2 id="安装">安装</h2>
<pre><code class="language-bash">brew install ffmpeg
</code></pre>
<h2 id="提取字幕">提取字幕</h2>
<pre><code class="language-bash">ffmpeg -i '/Download/Superman.and.Lois.S01E12.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb.mkv' -map 0:s:0 sub1.srt
</code></pre>
<h2 id="视频拼合">视频拼合</h2>
<ul>
<li>创建视频清单  filelist.txt</li>
</ul>
<pre><code class="language-bash">file 'new1.mov'
file 'new2.mov'
file 'new3.mov'
</code></pre>
<ul>
<li>合并视频</li>
</ul>
<pre><code class="language-bash">ffmpeg -f concat -i filelist.txt -c copy output.mov
</code></pre>
<h2 id="mov-转-mp4">mov 转 mp4</h2>
<pre><code class="language-bash">ffmpeg -i output.mov -vcodec h264 -acodec mp2 newvodeo.mp4
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[macOS Command]]></title>
        <id>https://www.jianyun.run/post/macos-command/</id>
        <link href="https://www.jianyun.run/post/macos-command/">
        </link>
        <updated>2022-02-07T02:08:09.000Z</updated>
        <content type="html"><![CDATA[<h1 id="macos-command">macOS Command</h1>
<h2 id="时间机器">时间机器</h2>
<pre><code class="language-bash"># 全速备份
sudo sysctl debug.lowpri_throttle_enabled=0
# 限速备份
sudo sysctl debug.lowpri_throttle_enabled=1
</code></pre>
<h2 id="在macos-catalina根目录创建data文件夹">在macOS Catalina根目录创建data文件夹</h2>
<p>macOS系统升级到10.15 Catalina后，根目录边变成了只读，我们无法在里面创建目录。下面是新的解决方案。</p>
<p>比如需要在根目录创建data文件夹，文件夹存在用户目录下面：<br>
1.在用户目录下创建data目录<br>
2.在/etc/synthetic.conf文件中增加一行<code>data System/Volumes/Data/Users/你的用户名/data</code></p>
<hr>
<p>下面是创建的命令</p>
<pre><code class="language-bash">mkdir ~/data
echo -e &quot;data\\tSystem/Volumes/Data$HOME/data&quot; | sudo tee -a /etc/synthetic.conf
</code></pre>
<p>执行以上命令后，重启系统</p>
<p>由于目录挂载的阶段较早，用户的目录对应到<code>System/Volumes/Data/Users/</code>里面</p>
<p>解决方案出处：<a href="https://apple.stackexchange.com/questions/371908/how-to-make-root-volume-writeable-again-in-catalina/372500#372500">How to make root volume writeable again in Catalina?</a></p>
<h2 id="批量转换cr2为jpg">批量转换CR2为JPG</h2>
<p>macOS 在CR2文件所在的目录执行命令</p>
<pre><code class="language-bash">for i in *.CR2; do sips -s format jpeg $i --out &quot;${i%.*}.jpg&quot;; done
</code></pre>
<h2 id="查看路由表">查看路由表</h2>
<pre><code class="language-bash">netstat -nr
netstat -nr | grep utun9 | awk '{print $1}'
netstat -nr | grep utun9 | awk '{print $1}' | xargs -I{} echo &quot;IP-CIDR,{},VPN,no-resolve&quot;
</code></pre>
<h2 id="重启icloud">重启iCloud</h2>
<pre><code class="language-bash">killall bird
cd ~/Library/Application\ Support
rm -rf CloudDocs
</code></pre>
<p>停止icloud上传服务，删除cache。等待icloud服务自动拉起</p>
]]></content>
    </entry>
</feed>